# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-2                                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sample-repo                             # set this to your Amazon ECR repository name
  ECS_SERVICE: yahoo-cluster-service                      # set this to your Amazon ECS service name
  ECS_CLUSTER: yahoo-cluster                              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/yahoo-deploy-definition.json  # set this to the path to your Amazon ECS task definition
                                                          # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: yahoo-container                         # set this to the name of the container in the
                                                          # containerDefinitions section of your task definition
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-2:457030438967:targetgroup/yahoo-target/3207829ba6d22e2b
                                                           # Target Group ARN

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Maven
      run: mvn clean install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deregister/register ECS target in target group
      id: target-update
      run: |
        # Deregister old ECS IP
        oldIp=$(aws elbv2 describe-target-health \
          --target-group-arn ${{ env.TARGET_GROUP_ARN }} \
          --query 'TargetHealthDescriptions[0].Target.Id' \
          | tr -d '"')
        aws elbv2 deregister-targets \
          --target-group-arn ${{ env.TARGET_GROUP_ARN}} \
          --targets Id=$oldIp
        # Register new ECS IP
        taskArn=$(aws ecs list-tasks \
          --cluster ${{ ECS_CLUSTER }} \
          --query "taskArns[0]" \
          | tr -d '"')
        newIp=$(aws ecs describe-tasks \
          --cluster ${{ ECS_CLUSTER }} \
          --tasks $taskArn \
          --query "tasks[0].containers[0].networkInterfaces[0].privateIpv4Address" \
          | tr -d '"')
        aws elbv2 register-targets \
          --target-group-arn ${{ env.TARGET_GROUP_ARN}} \
          --targets Id=$newIp
